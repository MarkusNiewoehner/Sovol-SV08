# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBCan]
#serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
canbus_uuid: c08357e0cb5a

[temperature_sensor EBBCan]
sensor_type: temperature_mcu
sensor_mcu: EBBCan
min_temp: 0
max_temp: 100

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 16
rotation_distance: 4.695 #4.637
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: PT1000 #EPCOS 100K B57560G104F
pullup_resistor: 2200
sensor_pin: EBBCan: PA3
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 350
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
pressure_advance: 0.025 #to be calibrated
pressure_advance_smooth_time: 0.03 #to be calibrated



[tmc2209 extruder]
uart_pin: EBBCan: PA15
interpolate: true
run_current: 0.85 #**
hold_current: 0.100
sense_resistor: 0.11 #**
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4




# sensor_type:MAX31865
# sensor_pin: EBBCan: PA4
# spi_bus: spi1
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

# [tmc2209 extruder]
# uart_pin: EBBCan: PA15
# run_current: 0.650
# stealthchop_threshold: 999999

[fan]
pin: EBBCan: PA0

[heater_fan hotend_fan]
pin: EBBCan: PA1
heater: extruder
heater_temp: 50.0


# [neopixel hotend_rgb]
# pin: EBBCan:PD3
# chain_count: 2
# #   The number of Neopixel chips that are "daisy chained" to the
# #   provided pin. The default is 1 (which indicates only a single
# #   Neopixel is connected to the pin).
# color_order: GRBW
# #   Set the pixel order required by the LED hardware. Options are GRB,
# #   RGB, GRBW, or RGBW. The default is GRB.

# [gcode_macro SET_HOTEND_RGB]
# gcode:
#     SET_LED LED=hotend_rgb INDEX=1 RED=0 GREEN=0 BLUE=0 WHITE=1  # Erste LED weiß
#     SET_LED LED=hotend_rgb INDEX=2 RED=1 GREEN=0 BLUE=0 WHITE=0  # Zweite LED rot

# [delayed_gcode SET_LEDS_AT_STARTUP]
# initial_duration: 1
# gcode:
#     SET_HOTEND_RGB



[neopixel hotend_rgb]
pin: EBBCan:PD3
chain_count: 2
color_order: GRBW

[gcode_macro SET_HOTEND_RGB]
variable_brightness: 0.0  # Aktuelle Helligkeit (0.0 bis 1.0)
variable_direction: 1     # 1 für heller, -1 für dunkler
gcode:
    SET_LED LED=hotend_rgb INDEX=1 RED=0 GREEN=0 BLUE=0 WHITE=1  # Erste LED weiß (statisch)
    {% set step = 0.02 %}  # Kleinere Schrittweite für feinere Abstufung
    {% set new_brightness = printer["gcode_macro SET_HOTEND_RGB"].brightness + (step * printer["gcode_macro SET_HOTEND_RGB"].direction) | float %}
    {% if new_brightness >= 1.0 %}
        {% set new_brightness = 1.0 %}
        SET_GCODE_VARIABLE MACRO=SET_HOTEND_RGB VARIABLE=direction VALUE=-1
    {% elif new_brightness <= 0.0 %}
        {% set new_brightness = 0.0 %}
        SET_GCODE_VARIABLE MACRO=SET_HOTEND_RGB VARIABLE=direction VALUE=1
    {% endif %}
    SET_GCODE_VARIABLE MACRO=SET_HOTEND_RGB VARIABLE=brightness VALUE={new_brightness}
    SET_LED LED=hotend_rgb INDEX=2 RED={new_brightness} GREEN=0 BLUE=0 WHITE=0  # Zweite LED rot, Helligkeit variiert

[delayed_gcode SMOOTH_FLASH_SECOND_LED]
initial_duration: 1  # Startet 1 Sekunde nach Klipper-Start
gcode:
    SET_HOTEND_RGB
    UPDATE_DELAYED_GCODE ID=SMOOTH_FLASH_SECOND_LED DURATION=0.01  # Schnellere Aktualisierung (20 ms)



#[bltouch]
#sensor_pin: ^EBBCan:PB8
#control_pin: EBBCan:PB9

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3
